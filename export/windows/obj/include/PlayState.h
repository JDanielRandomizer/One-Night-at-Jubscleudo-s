// Generated by Haxe 4.3.4
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,tweens,FlxTween)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x0a05f89d };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static ::hx::ObjectPtr< PlayState_obj > __new( ::Dynamic MaxSize);
		static ::hx::ObjectPtr< PlayState_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlayState",5d,83,c2,46); }

		static Float amHour;
		static Float haveBone;
		static Float closingVent;
		static Float closeVentBattery;
		static Float jeraldoRoom;
		static int watchingCam;
		static bool monitorIsUp;
		static bool cooldown;
		static Float jurelmaRoom;
		static Float jubscleudoRoom;
		static bool canDieForJubs;
		 ::flixel::FlxSprite bone;
		 ::flixel::text::FlxText welcomeText;
		 ::flixel::FlxSprite nightHour;
		 ::flixel::FlxSprite closableVent;
		 ::flixel::FlxSprite button;
		 ::flixel::text::FlxText bateriaText;
		 ::flixel::FlxSprite monitorPull;
		 ::flixel::FlxSprite monitor;
		 ::flixel::FlxSprite minimapa;
		 ::flixel::FlxSprite staticfnaf;
		 ::flixel::FlxSprite jeraldoFace;
		 ::flixel::FlxSprite cameraView;
		 ::flixel::FlxSprite jumpscare;
		 ::flixel::FlxSprite throwBone;
		 ::flixel::FlxSprite jurelma;
		 ::flixel::tweens::FlxTween cameraBuzzTween;
		 ::flixel::tweens::FlxTween alphaJoaquim;
		 ::flixel::FlxSprite joaquimHead;
		 ::flixel::FlxSprite jubscleudoCam;
		 ::flixel::FlxSprite jubscleudo;
		 ::flixel::group::FlxTypedGroup groupOfCam;
		 ::flixel::FlxSprite camButton;
		void create();

		void update(Float elapsed);

		void nightStart( ::flixel::tweens::FlxTween _);
		::Dynamic nightStart_dyn();

		void nightEnd();
		::Dynamic nightEnd_dyn();

		void usedBone();
		::Dynamic usedBone_dyn();

		void pullMonitor( ::Dynamic side);
		::Dynamic pullMonitor_dyn();

		void cameraBuzz(int camWatch);
		::Dynamic cameraBuzz_dyn();

		void jumpScared(::String jumpscared);
		::Dynamic jumpScared_dyn();

};


#endif /* INCLUDED_PlayState */ 
